- Клас: шаблон поведінки об'єкту. Наприклад: str, int, bool
- Об'єкт: конкретний екземпляр класу. Наприклад: "Hello, world", 15, True
- Атрибут: "властивість" або "характеристика" класу. Або просто зміна, що
описана всередині класу.
- Метод: "дія" класу. Або просто функція, що описана всередині
класу.
- self: параметр-посилання на конкретний екземпляр у методі. Кожен метод починається з
параметру self. Може мати будь-яку назву, але прийнято саме self.
- __init__ - магічний метод-конструктор. Спрацьовує, коли ініціалізується новий
екземпляр класу. Класично, використовується для назначення всіх атрибутів класу
- Магічні методи(dunder methods): спеціальні методи, що вже є у стандартному класі Python,
та викликлаються при спеціальній ситуації (наприклад, перетворення, ініціалізація, перегрузка
операторів, ітерація, тощо).
- Агрегація: варіант зв'язку класів, коли класи спокійно існують один без одного.
- Композиція: варіант зв'язку класів, коли один клас не може існувати без іншого.
- super(): посилання на батьківський клас, що використовується в наслідуванні.
- Наслідування: здатність класів переймати та доповнювати поведінку один одного.
- Поліморфізм: здатність класів одного "сімейства" взаємозаміняти один одного (в одному інтерфейсі).
- Інкапсуляція: механізм "захисту" внутрішньої структури від втручання (розділ структури
на внутрішню та інтерфейс). Прикладом інкапсуляції являються три режими доступу:
    1. public - атрибут або метод доступен всюди (і всередині класу, і в дочірніх класах, і зовні)
    2. protected - атрибут або метод доступен тільки всередині класу та його дочірніх класів (не доступен зовні)
    3. private - атрибут або метод доступен тільки всередині класу (і тільки в ньому)
- Класовий метод: метод, що працює на рівні класу та має аргумент cls замість self. (@classmethod)
- Абстрактний метод: метод, що обов'язково повинен бути переназначений в дочірніх класах. (import abc -> @abstractmethod)
- Статичний метод: метод, що не має посилання на self або cls. Метод ніяк не змінює атрибути, методи, а просто
знаходиться у класі та робить якісь дії з зовнішніми аргументами. (@staticmethod)
- Метаклас: клас, що керує створенням інших класів.
- __new__: ініціалізатор класу (не об'єкту). Викликається в метакласі при створенні нового класу
- Функтор: клас, що може викликатись, як функція. У функторі обов'язким є метод __call__.
- Дескриптор: клас, що управляє конкретним атрибутом. Має метод __get__ та __set__
