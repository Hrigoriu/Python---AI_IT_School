import os
import logging
import telebot as tb
from telebot import types # –î–ª—è —Ç–∏–ø—ñ–≤ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä —Ç–æ—â–æ

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –Ω–∞—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
from constants import DATABASE_FILE, EMPLOYEE_LEVELS, MONTHS # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
from salary_manager import SalaryManager # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä
from utils import format_salary, validate_month_format, LOCALE_SETUP_MESSAGE # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —É—Ç–∏–ª—ñ—Ç–∏

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É, —è–∫ –±—É–ª–æ –≤–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–ø–∏—Ç—ñ
TOKEN = '7917068514:AAF7-QdQQNg55_raHMDZN0_yI8ZNxkEfd-M'
#name: Salary
#name_bot: Salary_AI_bot

# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤ –∞–±–æ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
ADMIN_ID = 523793990 # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = tb.TeleBot(TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–∏—Ö
manager = SalaryManager(DATABASE_FILE)
logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {manager._load_data()}")
logger.info(LOCALE_SETUP_MESSAGE) # –õ–æ–≥—É—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—ñ


# --- –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–∞–º–∏ —Ä–æ–∑–º–æ–≤–∏ (—Ä—É—á–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è pyTelegramBotAPI) ---
# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É (chat_id)
user_states = {}
user_data = {} # –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–∑–º–æ–≤–∏

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤
STATE_IDLE = 0 # –ë–æ—Ç –æ—á—ñ–∫—É—î –∫–æ–º–∞–Ω–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
STATE_ADD_NAME = 1
STATE_ADD_MONTH = 2
STATE_ADD_LEVEL = 3
STATE_ADD_HOURS = 4
STATE_ADD_TASKS = 5
STATE_ADD_USD = 6
STATE_ADD_EUR = 7
STATE_EDIT_ID = 8
STATE_EDIT_FIELD = 9
STATE_EDIT_VALUE = 10
STATE_DELETE_ID_CONFIRM = 11 # –í–∏–¥–∞–ª–µ–Ω–Ω—è: –æ—á—ñ–∫—É—î–º–æ ID
STATE_REPORT_MONTH_INPUT = 12 # –ó–≤—ñ—Ç–∏: –æ—á—ñ–∫—É—î–º–æ –ú—ñ—Å—è—Ü—å –†—ñ–∫
STATE_REPORT_YEAR_INPUT = 13 # –ó–≤—ñ—Ç–∏: –æ—á—ñ–∫—É—î–º–æ –†—ñ–∫
STATE_FEEDBACK_GRADE = 14 # –°—Ç–∞–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
STATE_FEEDBACK_COMMENT = 15 # –°—Ç–∞–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ –≤—ñ–¥–≥—É–∫—É

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_state(chat_id):
    return user_states.get(chat_id, STATE_IDLE)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def set_user_state(chat_id, state):
    user_states[chat_id] = state

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def reset_user_state(chat_id):
    user_states.pop(chat_id, None)
    user_data.pop(chat_id, None)
    # –¢–∞–∫–æ–∂ –æ—á–∏—â–∞—î–º–æ register_next_step_handler –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫
    bot.clear_step_handler(chat_id)


# --- –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ReplyKeyboardMarkup ---
def get_main_menu_markup():
    """–°—Ç–≤–æ—Ä—é—î ReplyKeyboardMarkup –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤–∏ –∫–Ω–æ–ø–æ–∫, —è–∫—ñ –±—É–¥–µ–º–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ –≤ message_handler
    btn_add = types.KeyboardButton('‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å')
    btn_list = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤')
    btn_reports = types.KeyboardButton('üìä –ó–≤—ñ—Ç–∏')
    btn_settings = types.KeyboardButton('‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
    btn_feedback = types.KeyboardButton('üó£Ô∏è –í—ñ–¥–≥—É–∫–∏') # –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–≥—É–∫—ñ–≤ –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º
    btn_sites = types.KeyboardButton('üîó –¶—ñ–∫–∞–≤—ñ —Å–∞–π—Ç–∏') # –ö–Ω–æ–ø–∫–∞ —Å–∞–π—Ç—ñ–≤ –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º

    # –†–æ–∑—Ç–∞—à–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥–∞—Ö
    markup.add(btn_add, btn_list)
    markup.add(btn_reports, btn_settings)
    markup.add(btn_feedback, btn_sites) # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–≥—É–∫—ñ–≤ —Ç–∞ —Å–∞–π—Ç—ñ–≤

    return markup

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help. –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""
    chat_id = message.chat.id
    reset_user_state(chat_id) # –°–∫–∞—Å–æ–≤—É—î–º–æ –±—É–¥—å-—è–∫—É –ø–æ—Ç–æ—á–Ω—É —Ä–æ–∑–º–æ–≤—É

    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –∑–∞—Ä–ø–ª–∞—Ç.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ (–¥–µ—è–∫—ñ –∑ –Ω–∏—Ö –≤–∏–º–∞–≥–∞—é—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, –Ω–∞–ø—Ä. /month –°—ñ—á–µ–Ω—å 2024):\n"
        "/list, /month, /year_total, /year_avg, /settings, /settings_edit, /details, /add, /edit, /delete\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é."
    )
    bot.send_message(chat_id, welcome_text, reply_markup=get_main_menu_markup())

@bot.message_handler(commands=['cancel'])
def cancel_action(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /cancel."""
    chat_id = message.chat.id
    current_state = get_user_state(chat_id)
    reset_user_state(chat_id) # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —Ç–∞ handler
    if current_state != STATE_IDLE:
        bot.send_message(chat_id, "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_markup())
    else:
        bot.send_message(chat_id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –¥—ñ—ó –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.", reply_markup=get_main_menu_markup())


@bot.message_handler(commands=['list'])
def list_records_command(message):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç—É (—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ –º—ñ—Å—è—Ü–µ–º)."""
    chat_id = message.chat.id
    reset_user_state(chat_id) # –°–∫–∞—Å–æ–≤—É—î–º–æ –±—É–¥—å-—è–∫—É –ø–æ—Ç–æ—á–Ω—É —Ä–æ–∑–º–æ–≤—É

    records = manager.get_all_salary_records(sort_by='month')

    if not records:
        bot.send_message(chat_id, "–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        return

    report_parts = ["--- –£—Å—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç—É (–∑–∞ –º—ñ—Å—è—Ü–µ–º) ---"]
    for record in records:
        report_parts.append(manager.get_record_details_string(record))
    report_parts.append("--- –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É ---")

    # Telegram –º–∞—î –ª—ñ–º—ñ—Ç –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (4096 —Å–∏–º–≤–æ–ª—ñ–≤).
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∑–≤—ñ—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π.
    full_report = "\n".join(report_parts)
    for i in range(0, len(full_report), 4000):
         bot.send_message(chat_id, full_report[i:i+4000])


@bot.message_handler(commands=['month'])
def report_by_month_command_inline(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /month <–ú—ñ—Å—è—Ü—å –†—ñ–∫> (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –¥–æ –∫–Ω–æ–ø–∫–∏ –ó–≤—ñ—Ç–∏)."""
    chat_id = message.chat.id
    reset_user_state(chat_id) # –°–∫–∞—Å–æ–≤—É—î–º–æ –±—É–¥—å-—è–∫—É –ø–æ—Ç–æ—á–Ω—É —Ä–æ–∑–º–æ–≤—É

    args = message.text.split()[1:] # –ë–µ—Ä–µ–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    if not args:
        # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è —ñ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ next_step
        set_user_state(chat_id, STATE_REPORT_MONTH_INPUT)
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—è—Ü—å –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/month –°—ñ—á–µ–Ω—å 2024') –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –æ–∫—Ä–µ–º–æ:")
        bot.register_next_step_handler(message, process_report_month_input)
        return

    # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —î, –æ–±—Ä–æ–±–ª—è—î–º–æ –æ–¥—Ä–∞–∑—É
    month_year_input = " ".join(args)
    result = manager.get_salary_report_by_month(month_year_input)

    if isinstance(result, str): # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
        bot.send_message(chat_id, result)
    else: # –°–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ MonthlySalaryRecord
        report_parts = [f"--- –ó–∞–ø–∏—Å–∏ –∑–∞ {result[0].month_year} ---"] # result[0] –±–µ–∑–ø–µ—á–Ω–æ, –±–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
        for record in result:
             report_parts.append(manager.get_record_details_string(record))
        report_parts.append("--- –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É –∑–∞ –º—ñ—Å—è—Ü—å ---")
        full_report = "\n".join(report_parts)
        for i in range(0, len(full_report), 4000):
            bot.send_message(chat_id, full_report[i:i+4000])


@bot.message_handler(commands=['year_total'])
def report_year_total_command_inline(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /year_total <–†—ñ–∫>."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    args = message.text.split()[1:]
    if not args:
        # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–æ–∫—É —ñ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ next_step
        set_user_state(chat_id, STATE_REPORT_YEAR_INPUT)
        user_data[chat_id] = {'report_type': 'year_total'} # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –∑–≤—ñ—Ç—É
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ä—ñ–∫ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/year_total 2024') –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –æ–∫—Ä–µ–º–æ:")
        bot.register_next_step_handler(message, process_report_year_input)
        return

    # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —î, –æ–±—Ä–æ–±–ª—è—î–º–æ –æ–¥—Ä–∞–∑—É
    year_input = args[0]
    result = manager.get_total_salary_report_by_year(year_input)

    if isinstance(result, str):
         bot.send_message(chat_id, result)
    else: # –°–ª–æ–≤–Ω–∏–∫
         report_text = (
             f"--- –ó–∞–≥–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ {result['year']} —Ä—ñ–∫ ---\n"
             f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ —Ä—ñ–∫: {result['record_count']}\n"
             f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {result['formatted_total']}\n"
             "------------------------------"
         )
         bot.send_message(chat_id, report_text)


@bot.message_handler(commands=['year_avg'])
def report_year_avg_command_inline(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /year_avg <–†—ñ–∫>."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    args = message.text.split()[1:]
    if not args:
        # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–æ–∫—É —ñ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ next_step
        set_user_state(chat_id, STATE_REPORT_YEAR_INPUT)
        user_data[chat_id] = {'report_type': 'year_avg'} # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –∑–≤—ñ—Ç—É
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ä—ñ–∫ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/year_avg 2024') –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –æ–∫—Ä–µ–º–æ:")
        bot.register_next_step_handler(message, process_report_year_input)
        return

    # –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —î, –æ–±—Ä–æ–±–ª—è—î–º–æ –æ–¥—Ä–∞–∑—É
    year_input = args[0]
    result = manager.get_average_salary_report_by_year(year_input)

    if isinstance(result, str):
         bot.send_message(chat_id, result)
    else: # –°–ª–æ–≤–Ω–∏–∫
         report_text = (
             f"--- –°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º—ñ—Å—è—Ü—å —É {result['year']} —Ä–æ—Ü—ñ ---\n"
             f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ {result['record_count']} –∑–∞–ø–∏—Å—ñ–≤.\n"
             f"–°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞: {result['formatted_average']}\n"
             "------------------------------"
         )
         bot.send_message(chat_id, report_text)


@bot.message_handler(commands=['settings'])
def show_settings_command(message):
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞—Ä–ø–ª–∞—Ç–∏."""
    chat_id = message.chat.id
    reset_user_state(chat_id)
    settings_string = manager.get_settings_string()
    bot.send_message(chat_id, settings_string)

@bot.message_handler(commands=['settings_edit'])
def settings_edit_command(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    chat_id = message.chat.id
    reset_user_state(chat_id) # –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω

    args = message.text.split()[1:]
    if not args:
        help_text = (
            "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥:\n"
            "`/settings_edit base\\_amount –†—ñ–≤–µ–Ω—å –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings\\_edit base\\_amount Junior 15000`)\n" # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è MarkdownV2
            "`/settings\\_edit coefficient –†—ñ–≤–µ–Ω—å –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings\\_edit coefficient Middle 1\\.6`)\n"
            "`/settings\\_edit task\\_cost –ù–∞–∑–≤–∞ –í–∞—Ä—Ç—ñ—Å—Ç—å` (–Ω–∞–ø—Ä. `/settings\\_edit task\\_cost Complex 700`)\n"
            "`/settings\\_edit task\\_delete –ù–∞–∑–≤–∞` (–Ω–∞–ø—Ä. `/settings\\_edit task\\_delete Simple`)\n"
            "`/settings\\_edit hours –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings\\_edit hours 160`)\n"
            "`/settings\\_edit rates USD_–ó–Ω–∞—á–µ–Ω–Ω—è EUR_–ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings\\_edit rates 42\\.5 45\\.0`)\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /settings —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è."
        )
        # pyTelegramBotAPI –ø—ñ–¥—Ç—Ä–∏–º—É—î MarkdownV2 —Ç–∞ HTML. HTML –ø—Ä–æ—Å—Ç—ñ—à–∏–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        bot.send_message(chat_id, "<b>–Ø–∫ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n" + help_text.replace('`', '').replace('\\', ''), parse_mode="HTML") # –ü—Ä–æ—Å—Ç–æ –≤–∏–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        return

    setting_type = args[0].lower()
    result = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/settings_edit` –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏." # –î–µ—Ñ–æ–ª—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–µ—Ç–æ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if setting_type == 'base_amount' and len(args) == 3:
        level = args[1]
        value = args[2]
        result = manager.edit_base_amount_setting(level, value)
    elif setting_type == 'coefficient' and len(args) == 3:
        level = args[1]
        value = args[2]
        result = manager.edit_coefficient_setting(level, value)
    elif setting_type == 'task_cost' and len(args) >= 3: # –ù–∞–∑–≤–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏
         task_name_parts = args[1:-1]
         task_name = " ".join(task_name_parts)
         cost = args[-1]
         result = manager.edit_task_cost_setting(task_name, cost)
    elif setting_type == 'task_delete' and len(args) >= 2:
         task_name_parts = args[1:]
         task_name = " ".join(task_name_parts)
         result = manager.delete_task_cost_setting(task_name)
    elif setting_type == 'hours' and len(args) == 2:
        value = args[1]
        result = manager.edit_standard_hours_setting(value)
    elif setting_type == 'rates' and len(args) == 3:
        usd_value = args[1]
        eur_value = args[2]
        result = manager.edit_default_rates_setting(usd_value, eur_value)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
    bot.send_message(chat_id, result)

@bot.message_handler(commands=['details'])
def show_record_details_command(message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /details <ID>."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    args = message.text.split()[1:]
    if not args:
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '/details 123').")
        return

    record_id_input = args[0]
    record = manager.find_record_by_id(record_id_input)

    if not record:
        bot.send_message(chat_id, f"–ó–∞–ø–∏—Å —ñ–∑ ID '{record_id_input}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ –¥–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å—É
    details_text = manager.get_record_details_string(record)

    # –î–æ–¥–∞—î–º–æ Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    action_markup = types.InlineKeyboardMarkup(row_width=2)
    btn_edit = types.InlineKeyboardButton('‚úçÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data=f'edit_rec_{record.id}')
    btn_delete = types.InlineKeyboardButton('üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delete_rec_{record.id}')
    action_markup.add(btn_edit, btn_delete)

    bot.send_message(chat_id, details_text, reply_markup=action_markup)


# --- –û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ReplyKeyboardMarkup —Ç–∞ —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
# –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –º–∞—î –π—Ç–∏ –ü–Ü–°–õ–Ø –í–°–Ü–• CommandHandler-—ñ–≤, –∞–ª–µ –ü–ï–†–ï–î register_next_step_handler
# (—Ö–æ—á–∞ register_next_step_handler –º–∞—î –≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç).
@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ —î –∫–æ–º–∞–Ω–¥–∞–º–∏.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
    """
    chat_id = message.chat.id
    message_text = message.text.strip()
    current_state = get_user_state(chat_id)

    # –Ø–∫—â–æ –±–æ—Ç –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ, —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ
    # –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–æ register_next_step_handler.
    # –Ø–∫—â–æ –≤–æ–Ω–æ —Å—é–¥–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–æ –≤ —Å—Ç–∞–Ω—ñ, –≤—ñ–¥–º—ñ–Ω–Ω–æ–º—É –≤—ñ–¥ IDLE, —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞–Ω–¥–∞,
    # –≤–≤–µ–¥–µ–Ω–∞ –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (CommandHandlers –º–∞—é—Ç—å –≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç),
    # –∞–±–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç, —è–∫–∏–π –Ω–µ –æ–±—Ä–æ–±–∏–≤ register_next_step_handler.
    # –í –¥–∞–Ω—ñ–π —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, —è–∫—â–æ register_next_step_handler –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, —ñ –º–∏ –Ω–µ –≤ IDLE,
    # —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —â–æ—Å—å –Ω–µ —Ç–µ. –ö—Ä–∞—â–µ —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞–Ω.

    if current_state != STATE_IDLE:
        # –Ø–∫—â–æ –º–∏ —Ç—É—Ç, —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ register_next_step_handler –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
        # (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –∫–æ–º–∞–Ω–¥—É, —è–∫–∞ –ø–µ—Ä–µ—Ö–æ–ø–∏–ª–∞—Å—è CommandHandler-–æ–º —Ä–∞–Ω—ñ—à–µ,
        # –∞–±–æ –±—É–ª–∞ —è–∫–∞—Å—å –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞).
        # –ù–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–µ - –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞–Ω.
        bot.send_message(chat_id, "‚ùå –ü–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.", reply_markup=get_main_menu_markup())
        reset_user_state(chat_id)
        return # –ó—É–ø–∏–Ω—è—î–º–æ –æ–±—Ä–æ–±–∫—É —Ç—É—Ç

    # –ë–æ—Ç –≤ —Å—Ç–∞–Ω—ñ IDLE, –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç —è–∫ –∫–æ–º–∞–Ω–¥—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    match message_text:
        case '‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å':
            add_start(message) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        case 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤':
            list_records_command(message) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó —Å–ø–∏—Å–∫—É
        case 'üìä –ó–≤—ñ—Ç–∏':
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∑–≤—ñ—Ç—É
            report_markup = types.InlineKeyboardMarkup()
            btn_month_report = types.InlineKeyboardButton('–ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å', callback_data='report_type_month')
            btn_year_total = types.InlineKeyboardButton('–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞ —Ä—ñ–∫', callback_data='report_type_year_total')
            btn_year_avg = types.InlineKeyboardButton('–°–µ—Ä–µ–¥–Ω—ñ–π –∑–∞ —Ä—ñ–∫', callback_data='report_type_year_avg')
            report_markup.add(btn_month_report, btn_year_total, btn_year_avg, row_width=1)
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:", reply_markup=report_markup)
        case '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è':
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ—ó –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            settings_markup = types.InlineKeyboardMarkup()
            btn_show_settings = types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ', callback_data='settings_show')
            btn_edit_settings_help = types.InlineKeyboardButton('–Ø–∫ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data='settings_edit_help')
            settings_markup.add(btn_show_settings, btn_edit_settings_help, row_width=1)
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏:", reply_markup=settings_markup)
        case 'üó£Ô∏è –í—ñ–¥–≥—É–∫–∏': # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –í—ñ–¥–≥—É–∫–∏
             send_feedback_start(message) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É –¥—ñ–∞–ª–æ–≥—É –≤—ñ–¥–≥—É–∫—ñ–≤
        case 'üîó –¶—ñ–∫–∞–≤—ñ —Å–∞–π—Ç–∏': # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –°–∞–π—Ç–∏
            send_sites(message) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∞–π—Ç—ñ–≤
        case _:
            # –¶–µ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç, –∫–æ–ª–∏ –±–æ—Ç –≤ IDLE
            bot.send_message(chat_id, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ —Ç–µ–∫—Å—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥–∏.", reply_markup=get_main_menu_markup())


# --- –û–±—Ä–æ–±–Ω–∏–∫ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ---
@bot.callback_query_handler(func=lambda call: call.data.startswith(('report_type_', 'settings_', 'edit_rec_', 'delete_rec_', 'grade_')))
def handle_inline_buttons(call):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Inline –∫–Ω–æ–ø–æ–∫."""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    callback_data = call.data

    # –û–±–æ–≤'—è–∑–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
    bot.answer_callback_query(call.id, text='–û–ö')

    # --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ó–≤—ñ—Ç–∏" ---
    if callback_data.startswith('report_type_'):
        report_type = callback_data.split('_')[2] # report_type_month -> month

        # –í–∏–¥–∞–ª—è—î–º–æ –∞–±–æ —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ —ó—ó
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:', reply_markup=None)
        except Exception as e: # –ú–æ–∂–µ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∞, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–µ –∞–±–æ –≤–∂–µ –∑–º—ñ–Ω–µ–Ω–µ
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤ —á–∞—Ç—ñ {chat_id}: {e}")
             pass # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        if report_type == 'month':
            set_user_state(chat_id, STATE_REPORT_MONTH_INPUT)
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å –¥–ª—è –∑–≤—ñ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024'):")
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–µ–¥–µ —â–æ—Å—å —ñ–Ω—à–µ, handle_text_messages —Å–∫–∏–Ω–µ —Å—Ç–∞–Ω.
            bot.register_next_step_handler(call.message, process_report_month_input)
        elif report_type in ['year_total', 'year_avg']:
             user_data[chat_id] = {'report_type': report_type} # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –∑–≤—ñ—Ç—É
             set_user_state(chat_id, STATE_REPORT_YEAR_INPUT)
             bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫ –¥–ª—è –∑–≤—ñ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '2024'):")
             bot.register_next_step_handler(call.message, process_report_year_input)

    # --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" ---
    elif callback_data.startswith('settings_'):
        action = callback_data.split('_')[1] # settings_show -> show
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏:', reply_markup=None)
        except Exception as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤ —á–∞—Ç—ñ {chat_id}: {e}")
             pass

        if action == 'show':
            bot.send_message(chat_id, manager.get_settings_string())
        elif action == 'edit_help':
             help_text = (
                "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –∫–æ–º–∞–Ω–¥:\n"
                "`/settings_edit base_amount –†—ñ–≤–µ–Ω—å –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit base_amount Junior 15000`)\n"
                "`/settings_edit coefficient –†—ñ–≤–µ–Ω—å –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit coefficient Middle 1.6`)\n"
                "`/settings_edit task_cost –ù–∞–∑–≤–∞ –í–∞—Ä—Ç—ñ—Å—Ç—å` (–Ω–∞–ø—Ä. `/settings_edit task_cost Complex 700`)\n"
                "`/settings_edit task_delete –ù–∞–∑–≤–∞` (–Ω–∞–ø—Ä. `/settings_edit task_delete Simple`)\n"
                "`/settings_edit hours –ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit hours 160`)\n"
                "`/settings_edit rates USD_–ó–Ω–∞—á–µ–Ω–Ω—è EUR_–ó–Ω–∞—á–µ–Ω–Ω—è` (–Ω–∞–ø—Ä. `/settings_edit rates 42.5 45.0`)\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /settings —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è."
            )
             # HTML —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —á–∏—Ç–∞–Ω–Ω—è –≤ Telegram
             formatted_help_text = "<b>–Ø–∫ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n" + help_text.replace('`', '<code>').replace('\n', '<br>')
             bot.send_message(chat_id, formatted_help_text, parse_mode="HTML")


    # --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥—ñ–π –Ω–∞–¥ –∑–∞–ø–∏—Å–æ–º ("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "–í–∏–¥–∞–ª–∏—Ç–∏") ---
    elif callback_data.startswith(('edit_rec_', 'delete_rec_')):
         parts = callback_data.split('_')
         action = parts[0] # edit –∞–±–æ delete
         try:
             record_id = int(parts[2]) # edit_rec_123 -> 123

             # –í–∏–¥–∞–ª—è—î–º–æ Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π
             try:
                  bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=call.message.text, reply_markup=None)
             except Exception as e:
                  logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π {message_id} –≤ —á–∞—Ç—ñ {chat_id}: {e}")
                  pass # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è

             if action == 'delete' :
                  result = manager.delete_salary_record(record_id)
                  if isinstance(result, manager.MonthlySalaryRecord):
                       bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å #{record_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
                  else:
                       bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É #{record_id}: {result}")
             elif action == 'edit':
                  # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –¥—ñ–∞–ª–æ–≥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–¥–∞—é—á–∏ ID
                  # –ü–æ—á–∏–Ω–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑ –ø–µ—Ä—à–æ–≥–æ –∫—Ä–æ–∫—É (–≤–≤–µ–¥–µ–Ω–Ω—è ID)
                  # –ú–æ–∂–Ω–∞ –≤—ñ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞—Ç–∏ ID –≤ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫, —â–æ–± –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ –π–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                  bot.send_message(chat_id, f"–û–ö. –ü–æ—á–∏–Ω–∞—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É #{record_id}.")
                  # –Ü–Ω—ñ—Ü—ñ—é—î–º–æ –¥—ñ–∞–ª–æ–≥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –ü–µ—Ä–µ–¥–∞—î–º–æ ID –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É.
                  edit_start(call.message, record_id=record_id) # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è

         except (ValueError, IndexError) as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É callback_data '{callback_data}': {e}")
             bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

    # --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ü—ñ–Ω–∫–∏ ("–í—ñ–¥–≥—É–∫–∏") ---
    elif callback_data.startswith('grade_'):
        grade = callback_data.split('_')[1] # grade_5 -> 5
        username = call.from_user.username
        user_id = call.from_user.id # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID, –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ —î

        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ –∫–Ω–æ–ø–∫–∏
        try:
            bot.edit_message_text(chat_id=chat_id,
                                message_id=message_id,
                                text='–û—Ü—ñ–Ω–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                reply_markup=None)
        except Exception as e:
             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ {message_id} –≤ —á–∞—Ç—ñ {chat_id}: {e}")
             pass

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{username} (ID: {user_id}) –ø–æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–±—ñ –æ—Ü—ñ–Ω–∫—É {grade}!' if username else f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –ø–æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–±—ñ –æ—Ü—ñ–Ω–∫—É {grade}!'
        try:
            bot.send_message(ADMIN_ID, admin_message)
            # –ú–æ–∂–Ω–∞ –∑–∞–ø–∏—Ç–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—ñ—Å–ª—è –æ—Ü—ñ–Ω–∫–∏
            set_user_state(chat_id, STATE_FEEDBACK_COMMENT)
            user_data[chat_id] = {'grade': grade, 'username': username, 'user_id': user_id}
            bot.send_message(chat_id, "–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É! –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /skip.", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(call.message, process_feedback_comment)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {ADMIN_ID} –∞–±–æ –∑–∞–ø–∏—Ç—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è: {e}")
            bot.send_message(chat_id, "–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É!") # –ü—Ä–æ—Å—Ç–æ –¥—è–∫—É—î–º–æ, —è–∫—â–æ –Ω–µ –≤–∏–π—à–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω—É —á–∏ –∑–∞–ø–∏—Ç–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
            reset_user_state(chat_id) # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∫–æ–º–µ–Ω—Ç–∞—Ä—è


# --- –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ (–∫—Ä–æ–∫–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∑–≤—ñ—Ç—É) ---
def process_report_month_input(message):
    """–ö—Ä–æ–∫ 1 –∑–≤—ñ—Ç—É –∑–∞ –º—ñ—Å—è—Ü—å: –≤–≤–µ–¥–µ–Ω–Ω—è –ú—ñ—Å—è—Ü—å –†—ñ–∫."""
    chat_id = message.chat.id
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ /cancel
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É (—Ö–æ—á–∞ register_next_step_handler –º–∞–≤ –±–∏ —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ)
    if get_user_state(chat_id) != STATE_REPORT_MONTH_INPUT:
         bot.send_message(chat_id, "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_markup())
         reset_user_state(chat_id)
         return


    month_year_input = message.text.strip()
    result = manager.get_salary_report_by_month(month_year_input)

    if isinstance(result, str): # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {result}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ /cancel.")
        bot.register_next_step_handler(message, process_report_month_input) # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å –Ω–∞ —Ü—å–æ–º—É –∫—Ä–æ—Ü—ñ
    else: # –°–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ MonthlySalaryRecord
        report_parts = [f"--- –ó–∞–ø–∏—Å–∏ –∑–∞ {result[0].month_year} ---"] if result else [f"–î–∞–Ω—ñ –∑–∞ {month_year_input} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Ö–æ—á–∞ —Ñ–æ—Ä–º–∞—Ç –≤—ñ—Ä–Ω–∏–π)."]
        for record in result:
             report_parts.append(manager.get_record_details_string(record))
        if result:
            report_parts.append("--- –ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É –∑–∞ –º—ñ—Å—è—Ü—å ---")
        full_report = "\n".join(report_parts)
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –∑–≤—ñ—Ç –¥–æ–≤–≥–∏–π
        for i in range(0, len(full_report), 4000):
            bot.send_message(chat_id, full_report[i:i+4000])

        reset_user_state(chat_id) # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É


def process_report_year_input(message):
    """–ö—Ä–æ–∫ 1 –∑–≤—ñ—Ç—É –∑–∞ —Ä—ñ–∫: –≤–≤–µ–¥–µ–Ω–Ω—è –†—ñ–∫."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_REPORT_YEAR_INPUT:
         bot.send_message(chat_id, "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_markup())
         reset_user_state(chat_id)
         return

    year_input = message.text.strip()
    report_type = user_data[chat_id].get('report_type') # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–∏–ø –∑–≤—ñ—Ç—É

    if report_type == 'year_total':
        result = manager.get_total_salary_report_by_year(year_input)
    elif report_type == 'year_avg':
        result = manager.get_average_salary_report_by_year(year_input)
    else:
        result = "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–≤—ñ—Ç—É." # –ù–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫

    if isinstance(result, str):
         bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–±–æ –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {result}\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ /cancel.")
         bot.register_next_step_handler(message, process_report_year_input) # –ó–∞–ª–∏—à–∞—î–º–æ—Å—å
    else: # –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
         if report_type == 'year_total':
              report_text = (
                 f"--- –ó–∞–≥–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ {result['year']} —Ä—ñ–∫ ---\n"
                 f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ —Ä—ñ–∫: {result['record_count']}\n"
                 f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {result['formatted_total']}\n"
                 "------------------------------"
              )
         elif report_type == 'year_avg':
              report_text = (
                 f"--- –°–µ—Ä–µ–¥–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º—ñ—Å—è—Ü—å —É {result['year']} —Ä–æ—Ü—ñ ---\n"
                 f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ {result['record_count']} –∑–∞–ø–∏—Å—ñ–≤.\n"
                 f"–°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞: {result['formatted_average']}\n"
                 "------------------------------"
              )
         else:
              report_text = result # –í–∏–≤–µ–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–æ–º–∏–ª–∫—É
         bot.send_message(chat_id, report_text)

         reset_user_state(chat_id) # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É


# --- –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥—ñ–∞–ª–æ–≥—É –≤—ñ–¥–≥—É–∫—ñ–≤ (/feedback) ---
def send_feedback_start(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–≥—É–∫—É."""
    chat_id = message.chat.id
    reset_user_state(chat_id)

    feedback_markup = types.InlineKeyboardMarkup()
    btn_5 = types.InlineKeyboardButton(text='5üòç', callback_data=f'grade_5')
    btn_4 = types.InlineKeyboardButton(text='4üòä', callback_data=f'grade_4')
    btn_3 = types.InlineKeyboardButton(text='3üòì', callback_data=f'grade_3')
    btn_2 = types.InlineKeyboardButton(text='2ü§¢', callback_data=f'grade_2')
    btn_1 = types.InlineKeyboardButton(text='1ü§Æ', callback_data=f'grade_1')
    feedback_markup.add(btn_5, btn_4, btn_3, btn_2, btn_1, row_width=1)

    # –°—Ç–∞–Ω STATE_FEEDBACK_GRADE –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –≤ handle_inline_buttons –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –æ—Ü—ñ–Ω–∫–∏
    bot.send_message(chat_id, '–û–±–µ—Ä–∏ –æ—Ü—ñ–Ω–∫—É, —è–∫—É –ø–æ—Å—Ç–∞–≤–∏—à –º–µ–Ω—ñ:', reply_markup=feedback_markup)


def process_feedback_comment(message):
    """–ö—Ä–æ–∫ 2 –≤—ñ–¥–≥—É–∫—É: –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è."""
    chat_id = message.chat.id
    if message.text and message.text.strip() == '/cancel': cancel_action(message); return
    if get_user_state(chat_id) != STATE_FEEDBACK_COMMENT:
         bot.send_message(chat_id, "–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_markup())
         reset_user_state(chat_id)
         return

    comment = message.text.strip()
    grade = user_data[chat_id].get('grade', 'N/A')
    username = user_data[chat_id].get('username', 'N/A')
    user_id = user_data[chat_id].get('user_id', 'N/A')

    if comment.lower() == '/skip':
        comment = "(–ö–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ–ø—É—â–µ–Ω–æ)"
        bot.send_message(chat_id, "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫!", reply_markup=get_main_menu_markup())
    else:
        bot.send_message(chat_id, "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä!", reply_markup=get_main_menu_markup())

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–¥–º—ñ–Ω—É
    comment_admin_message = f'–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –æ—Ü—ñ–Ω–∫–∏ {grade} –≤—ñ–¥ @{username} (ID: {user_id}):\n{comment}' if username else f'–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –æ—Ü—ñ–Ω–∫–∏ {grade} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID {user_id}:\n{comment}'
    try:
        bot.send_message(ADMIN_ID, comment_admin_message)
    except Exception as e:
         logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è –∞–¥–º—ñ–Ω—É {ADMIN_ID}: {e}")


    reset_user_state(chat_id)

# --- –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó "–¶—ñ–∫–∞–≤—ñ —Å–∞–π—Ç–∏" ---
def send_sites(message):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Inline –∫–Ω–æ–ø–∫–∞–º–∏-–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏."""
    chat_id = message.chat.id
    reset_user_state(chat_id) # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω

    sites_markup = types.InlineKeyboardMarkup()   # –ú–∞—Ä–∫–∞–ø –¥–ª—è –∫–Ω–æ–ø–æ–∫, —â–æ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —É —á–∞—Ç—ñ (–Ω–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏—Ö)
    btn_pypi = types.InlineKeyboardButton(text='–ü–∞–∫–µ—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä Python', url='https://pypi.org/')
    btn_python_org = types.InlineKeyboardButton(text='–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç Python', url='https://www.python.org/')

    sites_markup.add(btn_pypi, btn_python_org, row_width=1)
    bot.send_message(chat_id, text='–û—Å—å —Ü—ñ–∫–∞–≤—ñ —Å–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±–µ:', reply_markup=sites_markup)


# --- –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–≥–∞—Ç–æ–µ—Ç–∞–ø–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ (/add, /edit, /delete) ---
# –¶—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å—Å—è –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ, —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ tictactoe_bot.py
# –Ω–∞ pyTelegramBotAPI, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ register_next_step_handler —Ç–∞ user_data/user_states.
# –í–∞–∂–ª–∏–≤–æ:
# 1. –ù–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ _step —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–∞ /cancel: if message.text and message.text.strip() == '/cancel': cancel_action(message); return
# 2. –ù–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ _step —Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: if get_user_state(chat_id) != STATE_EXPECTED: ... return
# 3. –£ —Ñ—É–Ω–∫—Ü—ñ—è—Ö *–ø–æ—á–∞—Ç–∫—É* –¥—ñ–∞–ª–æ–≥—ñ–≤ (/add, /edit, /delete) –≤–∏–∫–ª–∏–∫–∞—Ç–∏ reset_user_state(chat_id)
#    —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ set_user_state(chat_id, STATE_FIRST_STEP). –û—á–∏—Å—Ç–∏—Ç–∏ ReplyKeyboardRemove.
# 4. –£ *–∫—ñ–Ω—Ü–µ–≤–∏—Ö* —Ñ—É–Ω–∫—Ü—ñ—è—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ reset_user_state(chat_id). –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
# 5. –£ –≤—Å—ñ—Ö _step —Ñ—É–Ω–∫—Ü—ñ—è—Ö, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è, –≤–∏–∫–ª–∏–∫–∞—Ç–∏ bot.register_next_step_handler(message, next_step_function).

# –ü—Ä–∏–∫–ª–∞–¥ –ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è (–ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é):
def add_start(message):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É."""
    chat_id = message.chat.id
    reset_user_state(chat_id)
    set_user_state(chat_id, STATE_ADD_NAME)
    user_data[chat_id] = {}
    bot.send_message(chat_id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç—É. –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=types.ReplyKeyboardRemove()) # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –º–µ–Ω—é
    bot.register_next_step_handler(message, add_name_step)

# ... (–¥–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—ó add_name_step, add_month_step, ..., add_eur_rate_step - –ö–û–î –ù–ò–ñ–ß–ï)
# ... (–¥–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—ó edit_start, edit_id_step, ..., edit_value_step - –ö–û–î –ù–ò–ñ–ß–ï)
# ... (–¥–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—ó delete_start, delete_id_step - –ö–û–î –ù–ò–ñ–ß–ï)


# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞."""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ infinity_polling –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å
    # skip_pending=True –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –±–æ—Ç –º—ñ–≥ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∫–∏ –±—É–≤ –æ—Ñ–ª–∞–π–Ω
    # clean_update_queue=True –æ—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–≥—É –æ–Ω–æ–≤–ª–µ–Ω—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    bot.infinity_polling(skip_pending=True, clean_update_queue=True)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –±–æ—Ç–∞
if __name__ == "__main__":
    # –î–æ–¥–∞—î–º–æ —Å—é–¥–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó step-—Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è /add, /edit, /delete
    # –¶–µ –º—ñ—Å—Ü–µ –∑—Ä—É—á–Ω–µ, –±–æ –≤–æ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º—É—Ç—å –∑–º—ñ–Ω–Ω—ñ –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ (bot, manager, user_states, user_data, constants)

    # --- –§—É–Ω–∫—Ü—ñ—ó –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É (/add) ---
    # add_start –æ–≥–æ–ª–æ—à–µ–Ω–∞ –≤–∏—â–µ, –≤–æ–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ handle_text_messages
    def add_name_step(message):
        """–ö—Ä–æ–∫ 1 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –Ü–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ—á—ñ–∫—É—î–º–æ —Ç–µ–∫—Å—Ç)
        if not message.text:
             bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(message, add_name_step); return
        if get_user_state(chat_id) != STATE_ADD_NAME: return # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É

        name = message.text.strip()
        if not name:
            bot.send_message(chat_id, "–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:")
            bot.register_next_step_handler(message, add_name_step)
            return

        user_data[chat_id]['employee_name'] = name
        set_user_state(chat_id, STATE_ADD_MONTH)
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024'):")
        bot.register_next_step_handler(message, add_month_step)

    def add_month_step(message):
        """–ö—Ä–æ–∫ 2 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ú—ñ—Å—è—Ü—å."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        if not message.text:
             bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(message, add_month_step); return
        if get_user_state(chat_id) != STATE_ADD_MONTH: return

        month_year = message.text
        is_valid, result = validate_month_format(month_year)
        if not is_valid:
            bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: {result}\n–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024'):")
            bot.register_next_step_handler(message, add_month_step)
            return

        user_data[chat_id]['month_year'] = result

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—É
        employee_name = user_data[chat_id].get('employee_name')
        if employee_name is None: # –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞
             bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—î —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /add —â–µ —Ä–∞–∑.")
             reset_user_state(chat_id)
             return

        if any(r.employee_name.lower() == employee_name.lower() and r.month_year.lower() == result.lower() for r in manager.monthly_records):
             bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –∑–∞ {result} –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ {employee_name} —É–∂–µ —ñ—Å–Ω—É—é—Ç—å! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit –¥–ª—è –∑–º—ñ–Ω–∏.\n–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
             reset_user_state(chat_id)
             return

        set_user_state(chat_id, STATE_ADD_LEVEL)
        level_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for level in EMPLOYEE_LEVELS:
            level_keyboard.add(types.KeyboardButton(level))
        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞. –î–æ–ø—É—Å—Ç–∏–º—ñ: {', '.join(EMPLOYEE_LEVELS)}:", reply_markup=level_keyboard)
        bot.register_next_step_handler(message, add_level_step)

    def add_level_step(message):
        """–ö—Ä–æ–∫ 3 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –†—ñ–≤–µ–Ω—å."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        if not message.text:
             bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(message, add_level_step); return
        if get_user_state(chat_id) != STATE_ADD_LEVEL: return

        level = message.text.strip()
        if level not in EMPLOYEE_LEVELS:
            level_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            for level_opt in EMPLOYEE_LEVELS:
                 level_keyboard.add(types.KeyboardButton(level_opt))
            bot.send_message(chat_id, f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å '{level}'. –í–∏–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É: {', '.join(EMPLOYEE_LEVELS)}:", reply_markup=level_keyboard)
            bot.register_next_step_handler(message, add_level_step)
            return

        user_data[chat_id]['level'] = level
        set_user_state(chat_id, STATE_ADD_HOURS)
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Ñ–∞–∫—Ç–∏—á–Ω–æ –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ (—á–∏—Å–ª–æ):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, add_hours_step)

    def add_hours_step(message):
        """–ö—Ä–æ–∫ 4 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ì–æ–¥–∏–Ω–∏."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        if not message.text:
             bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ —á–∏—Å–ª–æ–º:", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(message, add_hours_step); return
        if get_user_state(chat_id) != STATE_ADD_HOURS: return

        try:
            hours = float(message.text)
            if hours < 0:
                bot.send_message(chat_id, "–í—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º–∏. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≥–æ–¥–∏–Ω:")
                bot.register_next_step_handler(message, add_hours_step)
                return
            user_data[chat_id]['actual_hours'] = hours
            set_user_state(chat_id, STATE_ADD_TASKS)
            bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∑–∞ –º—ñ—Å—è—Ü—å (—á–∏—Å–ª–æ). –ù–∞–ø—Ä–∏–∫–ª–∞–¥, {manager.settings.task_costs.get('Simple', 100.0):.2f} –∑–∞ Simple –∑–∞–¥–∞—á—É:")
            bot.register_next_step_handler(message, add_tasks_step)
        except (ValueError, TypeError):
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≥–æ–¥–∏–Ω:")
            bot.register_next_step_handler(message, add_hours_step)

    def add_tasks_step(message):
        """–ö—Ä–æ–∫ 5 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        if not message.text:
             bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å —á–∏—Å–ª–æ–º:", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(message, add_tasks_step); return
        if get_user_state(chat_id) != STATE_ADD_TASKS: return

        try:
            tasks_value = float(message.text)
            if tasks_value < 0:
                bot.send_message(chat_id, "–í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–æ—é. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
                bot.register_next_step_handler(message, add_tasks_step)
                return
            user_data[chat_id]['tasks_completed_value'] = tasks_value
            set_user_state(chat_id, STATE_ADD_USD)

            last_record = next(iter(reversed(manager.monthly_records)), None)
            default_usd = last_record.usd_rate if last_record else manager.settings.default_rates.get("USD", 40.0)

            bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞ (USD) –∑–∞ –º—ñ—Å—è—Ü—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, {default_usd:.2f}). –ù–∞–¥—ñ—à–ª—ñ—Ç—å Enter, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è:")
            bot.register_next_step_handler(message, add_usd_rate_step)

        except (ValueError, TypeError):
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–≤–¥–∞–Ω—å:")
            bot.register_next_step_handler(message, add_tasks_step)

    def add_usd_rate_step(message):
        """–ö—Ä–æ–∫ 6 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ö—É—Ä—Å USD."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        # –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç—É
        if get_user_state(chat_id) != STATE_ADD_USD: return

        usd_input = message.text.strip()
        last_record = next(iter(reversed(manager.monthly_records)), None)
        default_usd = last_record.usd_rate if last_record else manager.settings.default_rates.get("USD", 40.0)
        usd_rate = default_usd

        if usd_input: # –Ø–∫—â–æ —â–æ—Å—å –≤–≤–µ–ª–∏
            try:
                usd_rate = float(usd_input)
                if usd_rate <= 0:
                    bot.send_message(chat_id, "–ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:")
                    bot.register_next_step_handler(message, add_usd_rate_step)
                    return
                # –ú'—è–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è (–ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è)
                if usd_rate < 10 or usd_rate > 200:
                     bot.send_message(chat_id, f"‚ö†Ô∏è –£–≤–∞–≥–∞: –í–≤–µ–¥–µ–Ω–∏–π –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞ ({usd_rate:.2f}) –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∑–≤–∏—á–Ω–æ.")
            except (ValueError, TypeError):
                bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫—É—Ä—Å—É –¥–æ–ª–∞—Ä–∞ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:")
                bot.register_next_step_handler(message, add_usd_rate_step)
                return

        user_data[chat_id]['usd_rate'] = usd_rate
        set_user_state(chat_id, STATE_ADD_EUR)

        default_eur = last_record.eur_rate if last_record else manager.settings.default_rates.get("EUR", 43.0)

        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å —î–≤—Ä–æ (EUR) –∑–∞ –º—ñ—Å—è—Ü—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, {default_eur:.2f}). –ù–∞–¥—ñ—à–ª—ñ—Ç—å Enter, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è:")
        bot.register_next_step_handler(message, add_eur_rate_step)


    def add_eur_rate_step(message):
        """–ö—Ä–æ–∫ 7 –¥–æ–¥–∞–≤–∞–Ω–Ω—è: –ö—É—Ä—Å EUR —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        # –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if get_user_state(chat_id) != STATE_ADD_EUR: return

        eur_input = message.text.strip()
        last_record = next(iter(reversed(manager.monthly_records)), None)
        default_eur = last_record.eur_rate if last_record else manager.settings.default_rates.get("EUR", 43.0)
        eur_rate = default_eur

        if eur_input: # –Ø–∫—â–æ —â–æ—Å—å –≤–≤–µ–ª–∏
            try:
                eur_rate = float(eur_input)
                if eur_rate <= 0:
                    bot.send_message(chat_id, "–ö—É—Ä—Å —î–≤—Ä–æ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:")
                    bot.register_next_step_handler(message, add_eur_rate_step)
                    return
                # –ú'—è–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è (–ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è)
                if eur_rate < 10 or eur_rate > 200:
                    bot.send_message(chat_id, f"‚ö†Ô∏è –£–≤–∞–≥–∞: –í–≤–µ–¥–µ–Ω–∏–π –∫—É—Ä—Å —î–≤—Ä–æ ({eur_rate:.2f}) –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∑–≤–∏—á–Ω–æ.")
            except (ValueError, TypeError):
                bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫—É—Ä—Å—É —î–≤—Ä–æ –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º:")
                bot.register_next_step_handler(message, add_eur_rate_step)
                return

        user_data[chat_id]['eur_rate'] = eur_rate

        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä
        name = user_data[chat_id].get('employee_name')
        month = user_data[chat_id].get('month_year')
        level = user_data[chat_id].get('level')
        hours = user_data[chat_id].get('actual_hours')
        tasks = user_data[chat_id].get('tasks_completed_value')
        usd = user_data[chat_id].get('usd_rate')
        eur = user_data[chat_id].get('eur_rate')

        # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ None (—Ö–æ—á–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫—Ä–æ–∫–∏ –º–∞–ª–∏ –± —Ü–µ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏)
        if None in [name, month, level, hours, tasks, usd, eur]:
             logger.error(f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ —á–∞—Ç—ñ {chat_id}. –î–∞–Ω—ñ: {user_data.get(chat_id)}")
             bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞: –ù–µ –≤—Å—ñ –¥–∞–Ω—ñ –±—É–ª–∏ –∑—ñ–±—Ä–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ /add.", reply_markup=get_main_menu_markup())
        else:
            result = manager.add_salary_record(name, month, level, hours, tasks, usd, eur)

            if isinstance(result, manager.MonthlySalaryRecord):
                bot.send_message(chat_id,
                    f"‚úÖ –ó–∞–ø–∏—Å #{result.id} –∑–∞ {result.month_year} –¥–ª—è {result.employee_name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n"
                    f"–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(result.calculated_salary_uah, result.usd_rate, result.eur_rate)}",
                    reply_markup=get_main_menu_markup() # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                )
            else:
                bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {result}", reply_markup=get_main_menu_markup()) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

        reset_user_state(chat_id)


    # --- –§—É–Ω–∫—Ü—ñ—ó –∫—Ä–æ–∫—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É (/edit) ---
    # edit_start –æ–≥–æ–ª–æ—à–µ–Ω–∞ –≤–∏—â–µ (–º–æ–∂–µ –ø—Ä–∏–π–º–∞—Ç–∏ record_id —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç)
    def edit_start(message, record_id=None):
        """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É."""
        chat_id = message.chat.id
        reset_user_state(chat_id)
        set_user_state(chat_id, STATE_EDIT_ID)
        user_data[chat_id] = {}

        if record_id is not None:
             # –Ø–∫—â–æ ID –ø–µ—Ä–µ–¥–∞–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ Inline –∫–Ω–æ–ø–∫–∏), –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ID
             message.text = str(record_id) # –Ü–º—ñ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º ID
             bot.send_message(chat_id, f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É #{record_id}. –ü–µ—Ä–µ–≤—ñ—Ä—è—é ID...", reply_markup=types.ReplyKeyboardRemove())
             edit_id_step(message) # –í–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –∑ —Ü–∏–º ID
        else:
            # –Ø–∫—â–æ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–º–∞–Ω–¥–∞ /edit –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤), –∑–∞–ø–∏—Ç—É—î–º–æ –π–æ–≥–æ
            bot.send_message(chat_id, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É. –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è):", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, edit_id_step)

    def edit_id_step(message):
        """–ö—Ä–æ–∫ 1 —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: –í–≤–µ–¥–µ–Ω–Ω—è ID."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        if not message.text:
             bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É —á–∏—Å–ª–æ–º:", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(message, edit_id_step); return
        if get_user_state(chat_id) != STATE_EDIT_ID: return

        record_id_input = message.text.strip()
        record_to_edit = manager.find_record_by_id(record_id_input)

        if not record_to_edit:
            bot.send_message(chat_id, f"–ó–∞–ø–∏—Å —ñ–∑ ID '{record_id_input}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∞–±–æ /cancel:")
            bot.register_next_step_handler(message, edit_id_step)
            return

        user_data[chat_id]['record_id_to_edit'] = record_to_edit.id
        user_data[chat_id]['record_data'] = record_to_edit.to_dict() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ

        details_string = manager.get_record_details_string(record_to_edit)

        set_user_state(chat_id, STATE_EDIT_FIELD)
        bot.send_message(chat_id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å:\n{details_string}\n"
                                        "–Ø–∫–µ –ø–æ–ª–µ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏? (employee_name, month_year, level, actual_hours, tasks_completed_value, usd_rate, eur_rate)\n"
                                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        bot.register_next_step_handler(message, edit_field_step)


    def edit_field_step(message):
        """–ö—Ä–æ–∫ 2 —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: –í–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ–ª—è."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        if not message.text:
             bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–ª—è —Ç–µ–∫—Å—Ç–æ–º:", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(message, edit_field_step); return
        if get_user_state(chat_id) != STATE_EDIT_FIELD: return

        field_name = message.text.strip().lower()
        valid_fields = ['employee_name', 'month_year', 'level', 'actual_hours', 'tasks_completed_value', 'usd_rate', 'eur_rate']

        if field_name not in valid_fields:
            bot.send_message(chat_id, f"–ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ '{field_name}'. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–¥–Ω–µ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö: {', '.join(valid_fields)}\n"
                                            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
            bot.register_next_step_handler(message, edit_field_step)
            return

        user_data[chat_id]['field_to_edit'] = field_name
        current_value = user_data[chat_id]['record_data'].get(field_name, 'N/A') # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏

        set_user_state(chat_id, STATE_EDIT_VALUE)
        # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏/–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø–µ–≤–Ω–∏—Ö –ø–æ–ª—ñ–≤
        reply_markup = types.ReplyKeyboardRemove()
        extra_info = ""
        if field_name == 'month_year':
             extra_info = " (—É —Ñ–æ—Ä–º–∞—Ç—ñ '–ú—ñ—Å—è—Ü—å –†—ñ–∫', –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°—ñ—á–µ–Ω—å 2024')"
        elif field_name == 'level':
             level_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
             for level_opt in EMPLOYEE_LEVELS:
                  level_keyboard.add(types.KeyboardButton(level_opt))
             reply_markup = level_keyboard
             extra_info = f" (–î–æ–ø—É—Å—Ç–∏–º—ñ: {', '.join(EMPLOYEE_LEVELS)})"
        elif field_name in ['actual_hours', 'tasks_completed_value', 'usd_rate', 'eur_rate']:
             extra_info = " (—á–∏—Å–ª–æ)"

        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field_name}' (–ø–æ—Ç–æ—á–Ω–µ: '{current_value}'){extra_info}:\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip –∞–±–æ Enter, —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω.", reply_markup=reply_markup)
        bot.register_next_step_handler(message, edit_value_step)


    def edit_value_step(message):
        """–ö—Ä–æ–∫ 3 —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: –í–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        # –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ /skip
        if get_user_state(chat_id) != STATE_EDIT_VALUE: return

        field_to_edit = user_data[chat_id].get('field_to_edit')
        record_id = user_data[chat_id].get('record_id_to_edit')

        if not field_to_edit or record_id is None:
             logger.error(f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: –í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ –∞–±–æ ID –≤ —á–∞—Ç—ñ {chat_id}. –î–∞–Ω—ñ: {user_data.get(chat_id)}")
             bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /edit —â–µ —Ä–∞–∑.", reply_markup=get_main_menu_markup())
             reset_user_state(chat_id)
             return

        new_value_input = message.text.strip()

        if new_value_input.lower() == '/skip' or not new_value_input:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –∞–±–æ –∑–∞–ª–∏—à–∏–≤ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º - –Ω–µ —Ä–µ–¥–∞–≥—É—î–º–æ —Ü–µ –ø–æ–ª–µ
            updates = {} # –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫ –∑–º—ñ–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        else:
            # –ì–æ—Ç—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            updates = {field_to_edit: new_value_input}

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        result = manager.edit_salary_record(record_id, updates)

        if isinstance(result, manager.MonthlySalaryRecord):
            bot.send_message(chat_id,
                f"‚úÖ –ó–∞–ø–∏—Å #{result.id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"–ù–æ–≤–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(result.calculated_salary_uah, result.usd_rate, result.eur_rate)}",
                reply_markup=get_main_menu_markup()
            )
        elif isinstance(result, str) and result == "–ó–º—ñ–Ω –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.":
             bot.send_message(chat_id, "–ó–º—ñ–Ω –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.", reply_markup=get_main_menu_markup())
        else:
            bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {result}", reply_markup=get_main_menu_markup())

        reset_user_state(chat_id)


    # --- –§—É–Ω–∫—Ü—ñ—ó –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É (/delete) ---
    # delete_start –æ–≥–æ–ª–æ—à–µ–Ω–∞ –≤–∏—â–µ (–º–æ–∂–µ –ø—Ä–∏–π–º–∞—Ç–∏ record_id —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç)
    def delete_start(message, record_id=None):
        """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É."""
        chat_id = message.chat.id
        reset_user_state(chat_id)
        set_user_state(chat_id, STATE_DELETE_ID_CONFIRM)

        if record_id is not None:
             # –Ø–∫—â–æ ID –ø–µ—Ä–µ–¥–∞–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ Inline –∫–Ω–æ–ø–∫–∏), –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ
             message.text = str(record_id) # –Ü–º—ñ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º ID
             bot.send_message(chat_id, f"–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É #{record_id}. –ü–µ—Ä–µ–≤—ñ—Ä—è—é ID...", reply_markup=types.ReplyKeyboardRemove())
             delete_id_step(message)
        else:
            # –Ø–∫—â–æ ID –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∑–∞–ø–∏—Ç—É—î–º–æ –π–æ–≥–æ
            bot.send_message(chat_id, "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É. –í–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è):", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, delete_id_step)

    def delete_id_step(message):
        """–ö—Ä–æ–∫ 1 –≤–∏–¥–∞–ª–µ–Ω–Ω—è: –í–≤–µ–¥–µ–Ω–Ω—è ID —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è."""
        chat_id = message.chat.id
        if message.text and message.text.strip() == '/cancel': cancel_action(message); return
        if not message.text:
             bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∑–∞–ø–∏—Å—É —á–∏—Å–ª–æ–º:", reply_markup=types.ReplyKeyboardRemove())
             bot.register_next_step_handler(message, delete_id_step); return
        if get_user_state(chat_id) != STATE_DELETE_ID_CONFIRM: return

        record_id_input = message.text.strip()

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        result = manager.delete_salary_record(record_id_input)

        if isinstance(result, manager.MonthlySalaryRecord):
            bot.send_message(chat_id, f"‚úÖ –ó–∞–ø–∏—Å #{result.id} –∑–∞ {result.month_year} –¥–ª—è {result.employee_name} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=get_main_menu_markup())
        else:
            bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É: {result}", reply_markup=get_main_menu_markup())

        reset_user_state(chat_id) # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–∑–º–æ–≤—É

    # --- –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ ---
    main() # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–ø—É—Å–∫—É